// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Mux16 (AReg) control = first bit of instruction
    Mux16(a = instruction, b = ALUout, sel = instruction[15], out = ain);
    
    // ARegister control = dest d1 (if c command), true (if a command)
    // Output addressM
    Mux(a = true, b = instruction[5], sel = instruction[15], out = loada);
    ARegister(in = ain, load = loada, out = aout, out[0..14] = addressM);

    // DRegister control = dest d2 (if c command), false (if a command)
    Mux(a = false, b = instruction[4], sel = instruction[15], out = loadd);
    DRegister(in = ALUout, load = loadd, out = dout);

    // Mux16 (ALU) control = a bit of comp (if c command), areg (if a command)
    Mux(a = false, b = instruction[12], sel = instruction[15], out = aorm);
    Mux16(a = aout, b = inM, sel = aorm, out = aormout);

    // ALU control = c bits of comp (c command)
    ALU(x = dout, y = aormout, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], zr = zero, ng = neg, out = ALUout, out = outM);

    // writeM control = dest d3 (if c command), false (if a command)
    // Output writeM
    Mux(a = false, b = instruction[3], sel = instruction[15], out = writeM);
    
    // PC control = jump (c command), zr, ng
    // load if (j2 AND zr) OR (j1 AND ng) OR (j3 AND (NOT (zr OR ng))) and c command
    // inc if NOT (load OR reset)
    // Output pc
    And(a = instruction[1], b = zero, out = loadzr);
    And(a = instruction[2], b = neg, out = loadng);
    Or(a = zero, b = neg, out = nonpos);
    Not(in = nonpos, out = pos);
    And(a = instruction[0], b = pos, out = loadpos);
    Or(a = loadzr, b = loadng, out = loadzrng);
    Or(a = loadzrng, b = loadpos, out = loadzrngpos);
    And(a = loadzrngpos, b = instruction[15], out = loadall);
    Or(a = loadall, b = reset, out = notinc);
    Not(in = notinc, out = incr);
    PC(in = aout, load = loadall, inc = incr, reset = reset, out[0..14] = pc);
}